package _2021.contest._0501;

import org.junit.Test;

import java.util.*;

/**
 * Created by Yiyun On 2021/5/1 11:31
 */
public class _4 {

    public int[] closestRoom(int[][] rooms, int[][] queries) {
        TreeMap<Integer, Integer> idMap = new TreeMap<>();
        int max = 0;
        for (int[] r : rooms) {
            idMap.put(r[0], r[1]);
            max = Math.max(r[1], max);
        }

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int[] q = queries[i];
            int id = q[0];
            int size = q[1];

            boolean idExist = idMap.containsKey(id);
            if (idExist && idMap.get(id) >= size) {
                res[i] = id;
                continue;
            }

            if (max < size) {
                res[i] = -1;
                continue;
            }

            if (!idExist)
                idMap.put(id, -1);
            Map.Entry<Integer, Integer> pre = idMap.lowerEntry(id);
            Map.Entry<Integer, Integer> pro = idMap.higherEntry(id);
            Integer k1 = null;
            Integer k2 = null;
            while (pre != null) {
                if (pre.getValue() >=  size) {
                    k1 = pre.getKey();
                    break;
                }
                pre = idMap.lowerEntry(pre.getKey());
            }
            while (pro != null) {
                if (pro.getValue() >=  size) {
                    k2 = pro.getKey();
                    break;
                }
                pro = idMap.higherEntry(pro.getKey());
            }

            if (k1 == null && k2 == null) {
                res[i] = -1;
            } else if (k1 != null && k2 != null) {
                res[i] = Math.abs(k1-id) <= Math.abs(k2-id) ? k1 : k2;
            } else {
                res[i] = k1 != null ? k1 : k2;
            }

            if (!idExist)
                idMap.remove(id);

        }
        return res;
    }

    @Test
    /**
     *
     * {{469,153},{366,66},{295,235},{73,1},{185,263},{382,127},{137,154},{321,405},{431,245},{292,166},{253,205},{24,189},{106,433},{478,361},{385,399},{259,397},{325,265},{163,129},{431,361},{316,451},{271,261},{484,236},{316,442},{5,362},{209,236},{337,289},{1,279},{249,391},{51,337},{209,18},{277,177},{117,350},{189,181},{381,307},{29,313},{251,497},{1,325},{329,321},{68,215},{446,373},{181,393},{281,116},{183,301},{362,468},{193,109},{13,189},{454,181},{400,37},{87,128},{446,497},{147,97},{273,41},{349,202},{165,105},{173,220},{233,391},{84,426},{496,441},{151,57},{295,413},{110,175},{170,215},{133,119},{445,233},{27,444},{214,53},{477,303},{353,33},{231,243},{91,417},{78,483},{145,47},{181,37},{161,29},{141,446},{231,286},{101,137},{174,309},{437,421},{211,187},{256,363},{384,211},{1,111},{451,23},{95,151},{129,213},{327,196},{30,132},{61,149},{163,11},{243,133},{33,331},{343,211},{277,1},{282,93},{251,411},{15,259},{85,149},{1,157},{169,401}}
     */
    public void case1() {
        closestRoom(new int[][]{{173,397},{281,320},{415,181},{497,269},{77,285},{321,104},{385,43},{391,351},{371,287},{107,305},{247,187},{430,240},{465,321},{481,215},{1,423},{304,465},{411,176},{474,253},{219,225},{433,443},{106,365},{94,261},{135,187},{401,117},{181,276},{201,137},{461,312},{35,421},{13,307},{489,375},{69,253},{9,186},{89,164},{145,217},{331,183},{326,281},{271,429},{454,466},{153,297},{177,321},{49,381},{156,126},{117,321},{75,220},{493,71},{445,231},{263,425},{178,146},{4,131},{324,159},{5,491},{381,441},{183,73},{380,487},{192,322},{405,141},{150,301},{91,346},{100,287},{197,425},{292,391},{357,89},{486,281},{203,201},{484,429},{289,264},{17,486},{157,447},{134,67},{6,425},{237,47},{71,359},{196,467},{267,25},{265,493},{417,116},{368,191},{233,242},{207,359},{167,193},{386,306},{211,201},{22,1},{36,101},{152,171},{33,315},{351,429},{492,313},{397,267},{341,197},{161,221},{198,349},{470,405},{473,308},{301,129},{224,285},{307,137},{165,371},{337,201},{151,445}},
                new int[][]{{185,263}});
    }

}
